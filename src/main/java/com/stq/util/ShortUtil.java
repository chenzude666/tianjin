package com.stq.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.codec.digest.DigestUtils;

/**
 * 使用短网址生成方法，用来压缩长字符串，生成 Es Id
 * 这个方法会,生成四个短字符串,每一个字符串的长度为6
 * @param url
 * @return
 */
public class ShortUtil {

	public static String[] shortUrl(String url) {
		
        // 可以自定义生成 MD5 加密字符传前的混合 KEY
        String key = "narnia";
        // 要使用生成 URL 的字符
        String[] chars = new String[] { "a", "b", "c", "d", "e", "f", "g", "h",
                "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t",
                "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5",
                "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H",
                "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",
                "U", "V", "W", "X", "Y", "Z"
        };
        // 对传入字符串进行 MD5 加密
        String sMD5EncryptResult = DigestUtils.md5Hex(key + url);
        String hex = sMD5EncryptResult;
        String[] resUrl = new String[4];
        for (int i = 0; i < 4; i++) {
            // 把加密字符按照 8 位一组 16 进制与 0x3FFFFFFF 进行位与运算
            String sTempSubString = hex.substring(i * 8, i * 8 + 8);
            // 这里需要使用 long 型来转换，因为 Inteper .parseInt() 只能处理 31 位 , 首位为符号位 , 如果不用
            // long ，则会越界
            long lHexLong = 0x3FFFFFFF & Long.parseLong(sTempSubString, 16);
            String outChars = "";
            for (int j = 0; j < 6; j++) {
                // 把得到的值与 0x0000003D 进行位与运算，取得字符数组 chars 索引
                long index = 0x0000003D & lHexLong;
                // 把取得的字符相加
                outChars += chars[(int) index];
                // 每次循环按位右移 5 位
                lHexLong = lHexLong >> 5;
            }
            // 把字符串存入对应索引的输出数组
            resUrl[i] = outChars;
        }
        return resUrl;
    }

    /**
     * 获取字符串,将生成的相加,得到的24位字符
     * @param url
     * @return
     */
    public static String getShortUrl(String url){
        String[] aResult = shortUrl(url);
        StringBuilder s = new StringBuilder();
        s.append(aResult[0]);
        s.append(aResult[1]);
        s.append(aResult[2]);
        s.append(aResult[3]);
        return s.toString();
    }
    
    //测试方法
    public static void main(String[] args) {
    	System.out.println("22222   "  +  getShortUrl("那年花开月正圆	那年花开月正圆+cp+感	那年花开月正圆+悲剧	那年花开月正圆+不拖沓	那年花开月正圆+恶心	那年花开月正圆+尴尬	那年花开月正圆+感觉+虐	那年花开月正圆+狗血	那年花开月正圆+故事紧凑	那年花开月正圆+很燃	那年花开月正圆+接地气	那年花开月正圆+节奏紧凑	那年花开月正圆+剧本+不错	那年花开月正圆+剧情+不拖沓	那年花开月正圆+剧情+虐	那年花开月正圆+可悲	那年花开月正圆+泪崩	那年花开月正圆+虐哭	那年花开月正圆+虐心	那年花开月正圆+情节紧凑	那年花开月正圆+太虐了	那年花开月正圆+套路	那年花开月正圆+吐槽	那年花开月正圆+完美	那年花开月正圆+无聊	那年花开月正圆+有毒	那年花开月正圆+有意思	那年花开月正圆+扎心	那年花开月正圆+穿越	那年花开月正圆+高大上	那年花开月正圆+古风	那年花开月正圆+华丽	那年花开月正圆+漂亮	那年花开月正圆+清新	那年花开月正圆+wuli	那年花开月正圆+安利	那年花开月正圆+熬夜+看	那年花开月正圆+熬夜+追	那年花开月正圆+霸屏	那年花开月正圆+暴击	那年花开月正圆+爆红	那年花开月正圆+不够看	那年花开月正圆+不过瘾	那年花开月正圆+超+期待	那年花开月正圆+沉迷+无法自拔	那年花开月正圆+带感	那年花开月正圆+非常+期待	那年花开月正圆+感动+哭	那年花开月正圆+感觉太爽了	那年花开月正圆+过瘾	那年花开月正圆+好+期待	那年花开月正圆+好剧	那年花开月正圆+很+期待	那年花开月正圆+继续追	那年花开月正圆+经典	那年花开月正圆+精品	那年花开月正圆+看过+最棒	那年花开月正圆+看着过瘾	那年花开月正圆+良心+剧	那年花开月正圆+期待+更新	那年花开月正圆+弃剧	那年花开月正圆+强行安利	那年花开月正圆+强烈推荐	那年花开月正圆+强推	那年花开月正圆+燃+喜欢	那年花开月正圆+人+一起追	那年花开月正圆+忍不住	那年花开月正圆+认真+追	那年花开月正圆+入坑	那年花开月正圆+刷屏	那年花开月正圆+太棒了	那年花开月正圆+太赞了	那年花开月正圆+特别精彩	那年花开月正圆+停不下来	那年花开月正圆+推荐	那年花开月正圆+推荐+精品	那年花开月正圆+围观	那年花开月正圆+唯美	那年花开月正圆+喜欢极了	那年花开月正圆+陷入	那年花开月正圆+养肥+再看	那年花开月正圆+一起追剧	那年花开月正圆+意犹未尽	那年花开月正圆+欲罢不能	那年花开月正圆+在看	那年花开月正圆+在追	那年花开月正圆+真的有毒	那年花开月正圆+值得推荐	那年花开月正圆+值得一看	那年花开月正圆+制作精良	那年花开月正圆+中毒了	那年花开月正圆+助攻	那年花开月正圆+追剧	那年花开月正圆+追起	那年花开月正圆+足够+良心	那年花开月正圆+歌颂	那年花开月正圆+格局	那年花开月正圆+共鸣	那年花开月正圆+启发	那年花开月正圆+三观+毁	那年花开月正圆+思考	那年花开月正圆+讨论	那年花开月正圆+现实	那年花开月正圆+真实	那年花开月正圆+表白	那年花开月正圆+表演+到位	那年花开月正圆+发糖	那年花开月正圆+好苏	那年花开月正圆+拉黑	那年花开月正圆+老戏骨	那年花开月正圆+撩到	那年花开月正圆+圈粉	那年花开月正圆+少女心+爆棚	那年花开月正圆+帅炸	那年花开月正圆+苏	那年花开月正圆+飙戏	那年花开月正圆+颜值+爆表	那年花开月正圆+演得+不错	那年花开月正圆+演得+好	那年花开月正圆+演技+过瘾	那年花开月正圆+演技+好评	那年花开月正圆+演技+惊喜	那年花开月正圆+演技+精湛	那年花开月正圆+演技+在线	那年花开月正圆+演技+扎实	那年花开月正圆+演技+炸裂	那年花开月正圆+演技+折服	那年花开月正圆+演绎+入木三分	那年花开月正圆+中了+毒	那年花开月正圆+转粉"));
    	System.out.println("11111   "  +  getShortUrl("那年花开月正圆	那年花开月正圆+cp+感	那年花开月正圆+悲剧	那年花开月正圆+不拖沓	那年花开月正圆+恶心	那年花开月正圆+尴尬	那年花开月正圆+感觉+虐	那年花开月正圆+狗血	那年花开月正圆+故事紧凑	那年花开月正圆+很燃	那年花开月正圆+接地气	那年花开月正圆+节奏紧凑	那年花开月正圆+剧本+不错	那年花开月正圆+剧情+不拖沓	那年花开月正圆+剧情+虐	那年花开月正圆+可悲	那年花开月正圆+泪崩	那年花开月正圆+虐哭	那年花开月正圆+虐心	那年花开月正圆+情节紧凑	那年花开月正圆+太虐了	那年花开月正圆+套路	那年花开月正圆+吐槽	那年花开月正圆+完美	那年花开月正圆+无聊	那年花开月正圆+有毒	那年花开月正圆+有意思	那年花开月正圆+扎心	那年花开月正圆+穿越	那年花开月正圆+高大上	那年花开月正圆+古风	那年花开月正圆+华丽	那年花开月正圆+漂亮	那年花开月正圆+清新	那年花开月正圆+wuli	那年花开月正圆+安利	那年花开月正圆+熬夜+看	那年花开月正圆+熬夜+追	那年花开月正圆+霸屏	那年花开月正圆+暴击	那年花开月正圆+爆红	那年花开月正圆+不够看	那年花开月正圆+不过瘾	那年花开月正圆+超+期待	那年花开月正圆+沉迷+无法自拔	那年花开月正圆+带感	那年花开月正圆+非常+期待	那年花开月正圆+感动+哭	那年花开月正圆+感觉太爽了	那年花开月正圆+过瘾	那年花开月正圆+好+期待	那年花开月正圆+好剧	那年花开月正圆+很+期待	那年花开月正圆+继续追	那年花开月正圆+经典	那年花开月正圆+精品	那年花开月正圆+看过+最棒	那年花开月正圆+看着过瘾	那年花开月正圆+良心+剧	那年花开月正圆+期待+更新	那年花开月正圆+弃剧	那年花开月正圆+强行安利	那年花开月正圆+强烈推荐	那年花开月正圆+强推	那年花开月正圆+燃+喜欢	那年花开月正圆+人+一起追	那年花开月正圆+忍不住	那年花开月正圆+认真+追	那年花开月正圆+入坑	那年花开月正圆+刷屏	那年花开月正圆+太棒了	那年花开月正圆+太赞了	那年花开月正圆+特别精彩	那年花开月正圆+停不下来	那年花开月正圆+推荐	那年花开月正圆+推荐+精品	那年花开月正圆+围观	那年花开月正圆+唯美	那年花开月正圆+喜欢极了	那年花开月正圆+陷入	那年花开月正圆+养肥+再看	那年花开月正圆+一起追剧	那年花开月正圆+意犹未尽	那年花开月正圆+欲罢不能	那年花开月正圆+在看	那年花开月正圆+在追	那年花开月正圆+真的有毒	那年花开月正圆+值得推荐	那年花开月正圆+值得一看	那年花开月正圆+制作精良	那年花开月正圆+中毒了	那年花开月正圆+助攻	那年花开月正圆+追剧	那年花开月正圆+追起	那年花开月正圆+足够+良心	那年花开月正圆+歌颂	那年花开月正圆+格局	那年花开月正圆+共鸣	那年花开月正圆+启发	那年花开月正圆+三观+毁	那年花开月正圆+思考	那年花开月正圆+讨论	那年花开月正圆+现实	那年花开月正圆+真实	那年花开月正圆+表白	那年花开月正圆+表演+到位	那年花开月正圆+发糖	那年花开月正圆+好苏	那年花开月正圆+拉黑	那年花开月正圆+老戏骨	那年花开月正圆+撩到	那年花开月正圆+圈粉	那年花开月正圆+少女心+爆棚	那年花开月正圆+帅炸	那年花开月正圆+苏	那年花开月正圆+飙戏	那年花开月正圆+颜值+爆表	那年花开月正圆+演得+不错	那年花开月正圆+演得+好	那年花开月正圆+演技+过瘾	那年花开月正圆+演技+好评	那年花开月正圆+演技+惊喜	那年花开月正圆+演技+精湛	那年花开月正圆+演技+在线	那年花开月正圆+演技+扎实	那年花开月正圆+演技+炸裂	那年花开月正圆+演技+折服	那年花开月正圆+演绎+入木三分	那年花开月正圆+中了+毒	那年花开月正圆+转粉"));
    	System.out.println("3333    " + getShortUrl("测试"));
        StringBuilder sb = new StringBuilder();
        for(int i = 0;i<1000;i++){
            sb.append("ab");//长度为2000的一个字符串
        }
        String[] strings = shortUrl(sb.toString());
        for(int i = 0;i<strings.length;i++){
            System.out.println(strings[i]);
        }
        //验证生成的是否是唯一的
        List<String> list = new ArrayList<>();
        //生成1000万个短字符,已经足够使用
        for (int i = 0; i<100; i++){
            list.add(getShortUrl(sb.toString()));
        }
        //经测试生成1000万个短链接没有重复的
        //这里的判断重复的方法,是使用的SF上面一位网友的方法,我觉得比较优雅,只使用一次循环,而且也能判断,所以就使用了他的方法
        HashMap<String, Integer> hashMap = new HashMap<String, Integer>();
        for (String string : list) {
            if (hashMap.get(string) != null) {
                Integer value = hashMap.get(string);
                hashMap.put(string, value+1);
                System.out.println("the element:"+string+" is repeat");
            } else {
                hashMap.put(string, 1);
            }
        }
    }
}
